#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2012, Timothy Appnel <tim@appnel.com>
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible. If not, see <http://www.gnu.org/licenses/>.

import subprocess

def main():
    module = AnsibleModule(
        argument_spec = dict(
            src=dict(required=True),
            dest=dict(required=True),
            verbosity=dict(default=0),
            tmp_dir=dict(default=None),
            delete=dict(default='no', choices=['yes','no']),
            private_key=dict(default=None),
            rsync_path=dict(default=None),
        )
    )

    source = module.params['src']
    dest = module.params['dest']
    verbosity = module.params['verbosity']
    temp = module.params['tmp_dir']
    delete = module.params['delete']
    private_key = module.params['private_key']
    rsync_path = module.params['rsync_path']
    if not private_key and not '@' in dest and not '@' in source: # sufficient?
        return module.fail_json(\
            'A private key is required for remote connections.')
    cmd = 'rsync --archive --delay-updates --compress' # rsync param eventually
    if verbosity:
        cmd = '%s -%s' % (cmd, ('v' * int(verbosity)))
    else:
        cmd = cmd + ' --quiet'
    if temp:
        cmd = cmd + ' --temp-dir ' + temp
    if module.boolean(delete):
        cmd = cmd + ' --delete-after'
    if private_key:
        cmd = cmd + " --rsh '%s -i %s'" % ('ssh', private_key) # need ssh param
    if rsync_path:
        cmd = cmd + ' --rsync-path ' + rsync_path
        
    cmd = ' '.join([cmd, source, dest])
    cmdstr = cmd
    cmd = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    (out, err) = cmd.communicate()
    if cmd.returncode:
        return module.fail_json(msg=err, rc=cmd.returncode, cmd=cmdstr)
    else:
        return module.exit_json(changed=True, msg=out, rc=cmd.returncode, cmd=cmdstr)


# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()

