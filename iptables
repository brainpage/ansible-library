#!/usr/bin/python
# (c) 2012, Jonathan Palley <jonathan@brainpage.com>
#
# This is a module for Ansible (ansible.github.com)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################

# This is an opinionated iptables module.  Opinionated because as long as you
# stay within its "opinions" it is idempotent.
# It is designed for specific tasks/playbooks to add or remove rules.
# You can't do complex chains and ordering.  You CAN make sure ports are open or
# closed based on what is running on the server.
#
# There are two modes of operation.  Setting policies and setting rules.
# Both share the table parameter.  The default table is filter
# Both also share the "state" parameter which can be "present" or "absent"
#
# SET POLICY
# iptables policy=INPUT target=DROP
# SET RULES
# The following parameters are possible:
# chain: (INPUT/OUTPUT/FORWARD/etc)
# s: source
# d: destination
# i: interface
# p: tcp or udp
# mstate: (state) will set -m state --state X where X is what you set the value
# to.
# dport/sport: set iptables --dport or --sport
# tdport/tsport: set iptables -p tcp and --dport/--sport
# udport/usport: set iptables -p udp and --dport/--sport
# EXAMPLES:
# iptables chain='OUTPUT' -tdport=22
# iptables chain='INPUT,OUTPUT' i='lo'
# iptables chain='INPUT' s='192.168.1.2' tdport=1234
# iptables chain='OUTPUT' -tdport=4321 state='absent'
###################################

import os
import sys
import shlex
import syslog
import subprocess
try:
    import json
except ImportError:
    import simplejson as json

TABLES = ['nat', 'filter', 'mangle']
IPTABLES_FILE = '/etc/sysconfig/iptables'

class Rule(object):
    def __init__(self, chain, params):
        self.str = "-A " + chain
        self.params = params
        self.chain = chain
        #Process the params

        for p in ["s", "d", "i", "p"]:
            self.process_rule(p, " -" + p)

        self.process_rule("mstate", " -m state --state")
        self.process_rule("dport", " --dport")
        self.process_rule("sport", " --sport")
        self.process_rule("tdport", " -p tcp --dport")
        self.process_rule("udport", " -p udp --dport")
        self.process_rule("tsport", " -p tcp --sport")
        self.process_rule("usport", " -p udp --sport")


        j = params.get('j', 'ACCEPT')
        self.str += " -j " + j + " "


    #If value is an IP and it does not include a block this add /32
    #If value is not an IP it does nothing.
    def fix_ip(self, value):
        blocks = value.split("/")
        parts = blocks[0].split(".")
        if len(parts) == 4:
            for n in parts:
                if not 0 <= int(n) <= 255:
                    return value
            else:
                if len(blocks) == 2:
                    return value
                else:
                    return value + "/32"
        return value


    def process_rule(self, key, prefix):
        if not self.params.get(key, None) is None:
            self.str += prefix + " " + self.fix_ip(self.params[key])





class Table(object):
    __slots__ = ['name', 'policies', 'rules']

    def __init__(self, name):
        self.policies = []
        self.rules = []
        self.name = name
        code, out, err = _run('/sbin/iptables-save -t' + name)
        lines = out.split("\n")
        for line in lines:
            if line.startswith(":"):
                self.policies.append(line)
            if line.startswith("-"):
                self.rules.append(line)

    def update_policy(self, policy, target):
        for i,v in enumerate(self.policies):
            if v.startswith(":" + policy):
                if not v.startswith(":" + policy + " " + target):
                    self.policies[i] = ":%(p)s %(c)s [0:0]" % {'p':policy, 'c':target}
                    return True
        return False

    def update_rule(self, state, chain, params):
        rule = Rule(chain, params)
        if state=='present':
            try:
                self.rules.index(rule.str)
                return False
            except:
                pos = params.get("pos", "before_rejects")
                if pos=="end":
                    self.rules.append(rule.str)
                if pos=="before_rejects":
                    for i,v in enumerate(self.rules):
                        if v.find("REJECT") > 0:
                            self.rules[i:i] = [rule.str]
                            return True
                    self.rules.append(rule.str)
                else:
                    self.rules[pos:pos] = [rule.str]
                return True

        if state=='absent':
            try:
                self.rules.remove(rule.str)
                return True
            finally:
                self.rules
                return False
    def write(self):
        return  "*%(type)s\n%(p)s\n%(r)s\nCOMMIT\n" % {'type':self.name, 'p':"\n".join(self.policies), 'r':"\n".join(self.rules)}

def dump_kv(vars):
    return " ".join("%s='%s'" % (k,v) for (k,v) in vars.items())

def exit_kv(rc=0, **kwargs):
    print dump_kv(kwargs)
    sys.exit(rc)

def fail_kv(**kwargs):
    kwargs['failed'] = True
    exit_kv(rc=1, **kwargs)

def _run(cmd):
    # returns (rc, stdout, stderr) from shell command
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    stdout, stderr = process.communicate()
    return (process.returncode, stdout, stderr)


argfile = sys.argv[1]
args    = open(argfile, 'r').read()
items   = shlex.split(args)
syslog.openlog('ansible-%s' % os.path.basename(__file__))
syslog.syslog(syslog.LOG_NOTICE, 'Invoked with %s' % args)

if not len(items):
    fail_kv(msg='the module requires arguments -a')
    sys.exit(1)

# Setup the params
params = {}
for x in items:
    (k, v) = x.split("=", 1)
    params[k] = v
table = params.get('table', 'filter')

#Setup the different ip tables
tables = {}
for t in TABLES:
    tables[t] = Table(t)

changed = False
policy = params.get('policy', None)
target = params.get('target', None)
if not (policy is None or target is None):
    changed = tables[table].update_policy(policy.upper(), target.upper())

chain = params.get('chain', None)
state = params.get('state', "present")
if not chain is None:
   for c in chain.split(','):
       changed = tables[table].update_rule(state.lower(), c.upper(), params) or changed

#Save to file
f = open(IPTABLES_FILE, 'w')

for t in TABLES:
    f.write(tables[t].write())

f.close()
#Reload
if not params.get('state', None) == 'no-run':
    _run('/sbin/iptables-multi restore < /etc/sysconfig/iptables')

result = {}
result['msg'] = 'iptables finished'
result['changed'] = changed


print json.dumps(result)
